public class Test extends java.lang.Object
{
    public static TestNode global;

    public static void main(java.lang.String[])
    {
        TestNode temp$0;
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        temp$0 = staticinvoke <Test: TestNode foo()>();

        return;
    }

    public static TestNode foo()
    {
        Yolo temp$1;
        TestNode x, temp$0, y;

        temp$0 = new TestNode;

        specialinvoke temp$0.<TestNode: void <init>()>();

        x = temp$0;

        temp$1 = new Yolo;

        specialinvoke temp$1.<Yolo: void <init>()>();

        y = temp$1;

        if y == null goto label1;

        goto label2;

     label1:
        y = x;

     label2:
        instanceofRes1 = y instanceof Yolo;

        if instanceofRes1 == 0 goto label3;

        RecieverCast1 = (Yolo) y;

        virtualinvoke RecieverCast1.<Yolo: void car()>();

        goto label4;

     label3:
        instanceofRes2 = y instanceof TestNode;

        if instanceofRes2 == 0 goto label4;

        RecieverCast2 = (TestNode) y;

        virtualinvoke RecieverCast2.<TestNode: void car()>();

     label4:
        return x;
    }

    public static void bar(TestNode, TestNode)
    {
        TestNode p1, p2, v, temp$0;

        p1 := @parameter0: TestNode;

        p2 := @parameter1: TestNode;

        temp$0 = new TestNode;

        specialinvoke temp$0.<TestNode: void <init>()>();

        v = temp$0;

        p1.<TestNode: TestNode f> = v;

        return;
    }

    public void <init>()
    {
        Test this;

        this := @this: Test;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }
}
